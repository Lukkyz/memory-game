{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","currentFirst","currentScnd","find","card","idCard","src","process","cardList","click","bind","check","shuffle","restart","copyCard","this","map","Object","assign","newCardList","forEach","id","uuidv4","newCardListShuffled","setState","equal","indexFirst","findIndex","x","indexScnd","cardFinished","setTimeout","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","list","includes","alt","className","onClick","class","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.104a438b.chunk.js","sourcesContent":["import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentFirst: null,\n      currentScnd: null,\n      find: [],\n      card: [\n        {\n          idCard: 1,\n          src: process.env.PUBLIC_URL + \"/dialga.webp\",\n        },\n        {\n          idCard: 2,\n          src: process.env.PUBLIC_URL + \"/palkia.webp\",\n        },\n        {\n          idCard: 3,\n          src: process.env.PUBLIC_URL + \"/rayquaza.webp\",\n        },\n        {\n          idCard: 4,\n          src: process.env.PUBLIC_URL + \"/lugia.webp\",\n        },\n        {\n          idCard: 5,\n          src: process.env.PUBLIC_URL + \"/lucario.webp\",\n        },\n        {\n          idCard: 6,\n          src: process.env.PUBLIC_URL + \"/mewtwo.webp\",\n        },\n        {\n          idCard: 7,\n          src: process.env.PUBLIC_URL + \"/arceus.webp\",\n        },\n        {\n          idCard: 8,\n          src: process.env.PUBLIC_URL + \"/groudon.webp\",\n        },\n      ],\n      cardList: [],\n    };\n    this.click = this.click.bind(this);\n    this.check = this.check.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n    this.restart = this.restart.bind(this);\n  }\n  componentDidMount() {\n    let copyCard = this.state.card.map((card) => {\n      return Object.assign({}, card);\n    });\n    let newCardList = [...this.state.card, ...copyCard];\n    newCardList.forEach((card) => {\n      card.id = uuidv4();\n    });\n    let newCardListShuffled = this.shuffle(newCardList);\n    this.setState({\n      cardList: [...this.state.cardList, ...newCardListShuffled],\n    });\n  }\n  check() {\n    let equal = 0;\n    if (this.state.currentFirst && this.state.currentScnd) {\n      let indexFirst = this.state.cardList.findIndex(\n        (x) => x.id === this.state.currentFirst\n      );\n      let indexScnd = this.state.cardList.findIndex(\n        (x) => x.id === this.state.currentScnd\n      );\n      if (\n        this.state.cardList[indexFirst].idCard ===\n        this.state.cardList[indexScnd].idCard\n      ) {\n        equal = 1;\n      }\n      let cardFinished = this.state.cardList[indexFirst].idCard;\n      if (equal === 1) {\n        this.setState({\n          find: [...this.state.find, cardFinished],\n          currentFirst: null,\n          currentScnd: null,\n        });\n      } else {\n        setTimeout(() => {\n          this.setState({\n            currentFirst: null,\n            currentScnd: null,\n          });\n        }, 1000);\n      }\n    }\n  }\n  shuffle(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n  componentDidUpdate() {\n    this.check();\n  }\n  click(id) {\n    if (this.state.currentFirst && this.state.currentScnd) {\n      return;\n    }\n    if (!this.state.currentFirst) {\n      this.setState({\n        currentFirst: id,\n      });\n    } else {\n      this.setState({\n        currentScnd: id,\n      });\n    }\n  }\n  restart() {\n    this.setState({\n      find: [],\n      currentFirst: null,\n      currentScnd: null,\n    });\n  }\n  render() {\n    let list = this.state.cardList.map((card) =>\n      this.state.currentFirst === card.id ||\n      this.state.currentScnd === card.id ||\n      this.state.find.includes(card.idCard) ? (\n        <img alt=\"pokemon\" className=\"card\" src={card.src} />\n      ) : (\n        <img\n          alt=\"card\"\n          className=\"card\"\n          onClick={() => this.click(card.id)}\n          src={process.env.PUBLIC_URL + \"/pokeball.png\"}\n        />\n      )\n    );\n    return (\n      <div className=\"main\">\n        <h2 className=\"title\">Catch 'Em All!</h2>\n        <div>\n          Find : {this.state.find.length}/{this.state.card.length}\n        </div>\n        <div class=\"restart\" onClick={this.restart}>\n          Restart\n        </div>\n        <div className=\"container\">{list}</div>\n        {this.state.find.length === this.state.card.length ? (\n          <span className=\"win\">\n            <h2>Good Job !</h2>\n          </span>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}