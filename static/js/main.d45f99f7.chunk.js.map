{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","currentFirst","currentScnd","finished","turn","card","idCard","src","process","cardList","click","bind","check","shuffle","copyCard","this","map","Object","assign","newCardList","forEach","id","uuidv4","newCardListShuffled","setState","indexFirst","findIndex","x","indexScnd","cardFinished","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","list","includes","alt","className","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d45f99f7.chunk.js","sourcesContent":["import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentFirst: 0,\n      currentScnd: 0,\n      finished: [],\n      turn: 0,\n      card: [\n        {\n          idCard: 1,\n          src: process.env.PUBLIC_URL + \"/dialga.webp\",\n        },\n        {\n          idCard: 2,\n          src: process.env.PUBLIC_URL + \"/palkia.webp\",\n        },\n        {\n          idCard: 3,\n          src: process.env.PUBLIC_URL + \"/rayquaza.webp\",\n        },\n        {\n          idCard: 4,\n          src: process.env.PUBLIC_URL + \"/lugia.webp\",\n        },\n        {\n          idCard: 5,\n          src: process.env.PUBLIC_URL + \"/lucario.webp\",\n        },\n        {\n          idCard: 6,\n          src: process.env.PUBLIC_URL + \"/mewtwo.webp\",\n        },\n      ],\n      cardList: [],\n    };\n    this.click = this.click.bind(this);\n    this.check = this.check.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n  }\n  componentDidMount() {\n    let copyCard = this.state.card.map((card) => {\n      return Object.assign({}, card);\n    });\n    let newCardList = [...this.state.card, ...copyCard];\n    newCardList.forEach((card) => {\n      card.id = uuidv4();\n    });\n    let newCardListShuffled = this.shuffle(newCardList);\n    this.setState({\n      cardList: [...this.state.cardList, ...newCardListShuffled],\n    });\n  }\n  check() {\n    if (this.state.currentFirst && this.state.currentScnd) {\n      let indexFirst = this.state.cardList.findIndex(\n        (x) => x.id === this.state.currentFirst\n      );\n      let indexScnd = this.state.cardList.findIndex(\n        (x) => x.id === this.state.currentScnd\n      );\n      if (\n        this.state.cardList[indexFirst].idCard ===\n        this.state.cardList[indexScnd].idCard\n      ) {\n        let cardFinished = this.state.cardList[indexFirst].idCard;\n        this.setState({\n          finished: [...this.state.finished, cardFinished],\n        });\n      }\n      this.setState({\n        currentFirst: 0,\n        currentScnd: 0,\n        turn: this.state.turn + 1,\n      });\n    }\n  }\n  componentWillUpdate() {\n    this.check();\n  }\n  shuffle(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n  click(id) {\n    if (!this.state.currentFirst) {\n      this.setState({\n        currentFirst: id,\n      });\n    } else {\n      this.setState({\n        currentScnd: id,\n      });\n    }\n  }\n  render() {\n    let list = this.state.cardList.map((card) =>\n      this.state.currentFirst === card.id ||\n      this.state.currentScnd === card.id ||\n      this.state.finished.includes(card.idCard) ? (\n        <img alt=\"pokemon\" className=\"card\" src={card.src} />\n      ) : (\n        <img\n          alt=\"hidden card\"\n          onClick={() => this.click(card.id)}\n          className=\"card\"\n          src={process.env.PUBLIC_URL + \"/pokeball.png\"}\n        />\n      )\n    );\n    return <div className=\"container\">{list}</div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}